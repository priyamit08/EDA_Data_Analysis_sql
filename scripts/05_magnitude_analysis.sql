
/*
===============================================================================
Magnitude Analysis
===============================================================================
Purpose:
    - To quantify data and group results by specific dimensions.
    - For understanding data distribution across categories.

SQL Functions Used:
    - Aggregate Functions: SUM(), COUNT(), AVG()
    - GROUP BY, ORDER BY
===============================================================================
*/
Formula: sum[Measure] by [Dimension]
For example
Total sales by country
Total quantity by category
Average price by product ... etc


-- Find total customers by countries

SELECT * FROM gold.dim_customers

SELECT country,COUNT(customer_key) AS total_customer 
FROM gold.dim_customers
GROUP BY country
ORDER BY 1,2
	
-- Find total customers by gender

SELECT gender,COUNT(customer_key) AS total_customer 
FROM gold.dim_customers
GROUP BY gender
ORDER BY 2 DESC
-- Find total products by category
SELECT * FROM gold.dim_products

SELECT categories,COUNT(product_key) AS total_product
FROM gold.dim_products
GROUP BY 1
ORDER BY 2 DESC

-- What is the average costs in each category?

SELECT categories,AVG(product_cost) AS Avg_cost
FROM gold.dim_products
GROUP BY 1
ORDER BY 2 DESC

-- What is the total revenue generated for each category?

SELECT * FROM gold.fact_sales

SELECT 
		p.categories,
		SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.categories
ORDER BY total_revenue DESC

-- What is the total revenue generated by each customer?

SELECT 
		c.customer_key,
		c.first_name,
		c.last_name,
		SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY c.customer_key,
		c.first_name,
		c.last_name
ORDER BY total_revenue DESC

-- What is the distribution of sold items across countries?

SELECT c.country,
		SUM(f.quantity) AS item_sold
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY 1
ORDER BY 2 DESC
LIMIT 100
